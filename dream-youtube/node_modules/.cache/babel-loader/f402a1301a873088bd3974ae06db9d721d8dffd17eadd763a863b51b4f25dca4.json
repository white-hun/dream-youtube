{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\White\\\\Desktop\\\\dream-youtube\\\\dream-youtube\\\\src\\\\context\\\\YoutubeApiContext.jsx\",\n  _s = $RefreshSig$();\n// 데이터 하나를 제공해주는 우산\n\nimport { createContext, useContext } from \"react\";\nimport Youtube from \"../api/youtube\";\nimport YoutubeClient from \"../api/youtubeClient\";\nimport FakeYoutubeClient from \"../api/fakeYououtubeClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const YoutubeApiContext = /*#__PURE__*/createContext();\nconst client = new YoutubeClient();\n// const client = new FakeYoutubeClient();\nconst youtube = new Youtube(client); // <--\n\nexport function YoutubeApiProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(YoutubeApiContext.Provider, {\n    value: {\n      youtube\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this); // 우산을 쓰고 있는 모든 children 컴포넌트에서 value를 사용한다고 하면 설정한 인스턴스를 사용\n}\n_c = YoutubeApiProvider;\nexport function useYoutubeApi() {\n  _s();\n  return useContext(YoutubeApiContext);\n}\n\n// YoutubeApiProvider 라는 우산(context)을 만들고\n// 어떤 Youtube 인스턴스를 사용할지 결정(FakeYoutube, Youtube) -->\n// 그래서 UI를 보여주는 <videos> 컴포넌트에서는 어떤 인스턴스를 사용하는지 어떤 네트워크 통신을 하는지 어디서 데이터를 가지고 오는지 전혀 상관하지 않아도\n// provider에서 제공해주는 youtube를 사용해서 원하는 함수를 호출하면 된다\n\n// 1. context를 만든다\n// 2. provider(우산?컴포넌트)을 만든다\n// 3. useYoutubeApi를 사용하면 value(=youtube)를 사용할 수 있게 해준다\n// 4.우산 씌워주고 필요한 곳에서 value를 불러온다\n_s(useYoutubeApi, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"YoutubeApiProvider\");","map":{"version":3,"names":["createContext","useContext","Youtube","YoutubeClient","FakeYoutubeClient","jsxDEV","_jsxDEV","YoutubeApiContext","client","youtube","YoutubeApiProvider","_ref","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useYoutubeApi","_s","$RefreshReg$"],"sources":["C:/Users/White/Desktop/dream-youtube/dream-youtube/src/context/YoutubeApiContext.jsx"],"sourcesContent":["// 데이터 하나를 제공해주는 우산\r\n\r\nimport { createContext, useContext } from \"react\";\r\nimport Youtube from \"../api/youtube\";\r\nimport YoutubeClient from \"../api/youtubeClient\";\r\nimport FakeYoutubeClient from \"../api/fakeYououtubeClient\";\r\n\r\nexport const YoutubeApiContext = createContext();\r\n\r\nconst client = new YoutubeClient();\r\n// const client = new FakeYoutubeClient();\r\nconst youtube = new Youtube(client); // <--\r\n\r\nexport function YoutubeApiProvider({ children }) {\r\n  return <YoutubeApiContext.Provider value={{ youtube }}>{children}</YoutubeApiContext.Provider>; // 우산을 쓰고 있는 모든 children 컴포넌트에서 value를 사용한다고 하면 설정한 인스턴스를 사용\r\n}\r\n\r\nexport function useYoutubeApi() {\r\n  return useContext(YoutubeApiContext);\r\n}\r\n\r\n// YoutubeApiProvider 라는 우산(context)을 만들고\r\n// 어떤 Youtube 인스턴스를 사용할지 결정(FakeYoutube, Youtube) -->\r\n// 그래서 UI를 보여주는 <videos> 컴포넌트에서는 어떤 인스턴스를 사용하는지 어떤 네트워크 통신을 하는지 어디서 데이터를 가지고 오는지 전혀 상관하지 않아도\r\n// provider에서 제공해주는 youtube를 사용해서 원하는 함수를 호출하면 된다\r\n\r\n// 1. context를 만든다\r\n// 2. provider(우산?컴포넌트)을 만든다\r\n// 3. useYoutubeApi를 사용하면 value(=youtube)를 사용할 수 있게 해준다\r\n// 4.우산 씌워주고 필요한 곳에서 value를 불러온다\r\n"],"mappings":";;AAAA;;AAEA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,iBAAiB,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,OAAO,MAAMC,iBAAiB,gBAAGP,aAAa,EAAE;AAEhD,MAAMQ,MAAM,GAAG,IAAIL,aAAa,EAAE;AAClC;AACA,MAAMM,OAAO,GAAG,IAAIP,OAAO,CAACM,MAAM,CAAC,CAAC,CAAC;;AAErC,OAAO,SAASE,kBAAkBA,CAAAC,IAAA,EAAe;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAC7C,oBAAOL,OAAA,CAACC,iBAAiB,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEL;IAAQ,CAAE;IAAAG,QAAA,EAAEA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAA8B,CAAC,CAAC;AAClG;AAACC,EAAA,GAFeT,kBAAkB;AAIlC,OAAO,SAASU,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAC9B,OAAOpB,UAAU,CAACM,iBAAiB,CAAC;AACtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAAc,EAAA,CAZgBD,aAAa;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}