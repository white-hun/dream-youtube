{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/White/Desktop/dream-youtube/dream-youtube/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/White/Desktop/dream-youtube/dream-youtube/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _searchByKeyword = /*#__PURE__*/_classPrivateFieldLooseKey(\"searchByKeyword\");\nvar _mostPopular = /*#__PURE__*/_classPrivateFieldLooseKey(\"mostPopular\");\n// import axios from \"axios\";\n\n// export default class Youtube {\n//   constructor() {\n//     this.httpClient = axios.create({\n//       baseURL: \"https://www.googleapis.com/youtube/v3\",\n//       params: { key: process.env.REACT_APP_YOUTUBE_API_KEY },\n//     });\n//   }\n\n//   async search(keyword) {\n//     return keyword ? this.#searchByKeyword(keyword) : this.#mostPopular();\n//   }\n\n//   async #searchByKeyword(keyword) {\n//     return this.httpClient\n//       .get(\"search\", {\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           type: \"video\",\n//           q: keyword,\n//         },\n//       }) //\n//       .then((res) => res.data.items)\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId }))); // item를 낱개로 풀어서 다 그대로 쓸건데, // id를 개체로 쓰는것이 아니라 item에 있는 id내부의 videoId로 변경\n//   }\n//   async #mostPopular() {\n//     return this.httpClient\n//       .get(\"videos\", {\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           chart: \"mostPopular\",\n//         },\n//       })\n//       .then((res) => res.data.items);\n//   }\n// }\n\n// constructor에서 axios할 때 필요한 기본적인 설정을 해준다\n// 그걸 httpClient에 할당\n// url과 key를 작성한다\n// 어떤 api든 key를 작성해야한다(해당 api에서 발급받은 key)\n// 시크릿 키 같은 것을 바로 코드에 적어서 깃허브에 커밋하면 보안에 매우 취약\n// 이런 정보들은 제일 상위 폴더에 .env파일을 만들어서 작성해준다\n// .env 파일은 create-react-app으로 APP을 만들면 기본적으로 사용할 수 있다\n// 그리고 커밋되지 않도록 .gitignore에 꼭 .env를 작성한다\n// .env는 절대 커밋하지 않고 환경변수 처럼 사용한다\n// 나중에 배포할 때 변수(REACT_APP_YOUTUBE_API_KEY)를 서버상에서 환경변수로 설정해준다\n// params는 api의 주소처럼 작성해주면 된다\n\n// export default class Youtube {\n//   constructor() {\n//     this.httpClient = axios.create({\n//       baseURL: \"https://www.googleapis.com/youtube/v3\",\n//       params: { key: process.env.REACT_APP_YOUTUBE_API_KEY },\n//     });\n//   }\n\n//   async search(keyword) {\n//     return keyword ? this.#searchByKeyword() : this.#mostPopular();\n//   }\n\n//   async #searchByKeyword(keyword) {\n//     return this.httpClient\n//       .get(\"search\", {\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           type: \"video\",\n//           q: keyword,\n//         },\n//       })\n//       .then((res) => res.data.items)\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId })));\n//   }\n//   async #mostPopular() {\n//     return this.httpClient\n//       .get(\"videos\", {\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           chart: \"mostPopular\",\n//         },\n//       })\n//       .then((res) => res.data.items);\n//   }\n// }\n\n// -----------------------------------------------------------------------------------------\n\n// export default class Youtube {\n//   constructor(apiClient) {\n//     this.apiClient = apiClient;\n//   }\n\n//   async search(keyword) {\n//     return keyword ? this.#searchByKeyword(keyword) : this.#mostPopular();\n//   }\n\n//   async #searchByKeyword(keyword) {\n//     return this.apiClient\n//       .search({\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           type: \"video\",\n//           q: keyword,\n//         },\n//       })\n//       .then((res) => res.data.items)\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId })));\n//   }\n\n//   async #mostPopular() {\n//     return this.apiClient\n//       .videos({\n//         params: {\n//           part: \"snippet\",\n//           maxResults: 25,\n//           chart: \"mostPopular\",\n//         },\n//       })\n//       .then((res) => res.data.items);\n//   }\n// }\n\n// 어떤 apiClient를 받아온다\n// search라는 공개 함수가 있다\n//  - Youtube Class를 이용해서 만든 인스턴스에서 호출이 가능한 함수\n// keyword가 있다면 keyword를 받아서 searchByKeyword를, 없으면 mostPopular의 결과값을 바로 return\n// #searchBykeyword\n// 어떤 Client에 대해 search함수를 사용할 때 필요한 params를 전달\n// search는 비동기 함수니까 promise를 return하는 함수니까 then으로 받아온 데이터를 적절히 처리\n// #mostPopular\n// 어떤 Client에 대해 videos함수를 사용할 때 필요한 params를 전달\n// Youtube class\n// 외부로부터 전달 받은 apiClient를 이용해서 원하는 옵션을 전달해서 apiClient를 호출\n// apiClient에는 두가지 함수가 있다(search, videos)\n\n// -----------------------------------------------------------------------------------------\n\nexport default class Youtube {\n  constructor(apiClient) {\n    Object.defineProperty(this, _mostPopular, {\n      value: _mostPopular2\n    });\n    Object.defineProperty(this, _searchByKeyword, {\n      value: _searchByKeyword2\n    });\n    this.apiClient = apiClient;\n  }\n  async search(keyword) {\n    return keyword ? _classPrivateFieldLooseBase(this, _searchByKeyword)[_searchByKeyword](keyword) : _classPrivateFieldLooseBase(this, _mostPopular)[_mostPopular]();\n  }\n}\nasync function _searchByKeyword2(keyword) {\n  return this.apiClient.search({\n    params: {\n      part: \"snippet\",\n      maxResults: 25,\n      type: \"video\",\n      q: keyword\n    }\n  }).then(res => res.data.items).then(items => items.map(item => ({\n    ...item,\n    id: item.id.videoId\n  })));\n}\nasync function _mostPopular2() {\n  return this.apiClient.videos({\n    params: {\n      part: \"snippet\",\n      maxResults: 25,\n      chart: \"mostPopular\"\n    }\n  }).then(res => {\n    var _res$data;\n    return res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.items;\n  });\n}","map":{"version":3,"names":["Youtube","constructor","apiClient","Object","defineProperty","_mostPopular","value","_mostPopular2","_searchByKeyword","_searchByKeyword2","search","keyword","_classPrivateFieldLooseBase","params","part","maxResults","type","q","then","res","data","items","map","item","id","videoId","videos","chart","_res$data"],"sources":["C:/Users/White/Desktop/dream-youtube/dream-youtube/src/api/youtube.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// export default class Youtube {\r\n//   constructor() {\r\n//     this.httpClient = axios.create({\r\n//       baseURL: \"https://www.googleapis.com/youtube/v3\",\r\n//       params: { key: process.env.REACT_APP_YOUTUBE_API_KEY },\r\n//     });\r\n//   }\r\n\r\n//   async search(keyword) {\r\n//     return keyword ? this.#searchByKeyword(keyword) : this.#mostPopular();\r\n//   }\r\n\r\n//   async #searchByKeyword(keyword) {\r\n//     return this.httpClient\r\n//       .get(\"search\", {\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           type: \"video\",\r\n//           q: keyword,\r\n//         },\r\n//       }) //\r\n//       .then((res) => res.data.items)\r\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId }))); // item를 낱개로 풀어서 다 그대로 쓸건데, // id를 개체로 쓰는것이 아니라 item에 있는 id내부의 videoId로 변경\r\n//   }\r\n//   async #mostPopular() {\r\n//     return this.httpClient\r\n//       .get(\"videos\", {\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           chart: \"mostPopular\",\r\n//         },\r\n//       })\r\n//       .then((res) => res.data.items);\r\n//   }\r\n// }\r\n\r\n// constructor에서 axios할 때 필요한 기본적인 설정을 해준다\r\n// 그걸 httpClient에 할당\r\n// url과 key를 작성한다\r\n// 어떤 api든 key를 작성해야한다(해당 api에서 발급받은 key)\r\n// 시크릿 키 같은 것을 바로 코드에 적어서 깃허브에 커밋하면 보안에 매우 취약\r\n// 이런 정보들은 제일 상위 폴더에 .env파일을 만들어서 작성해준다\r\n// .env 파일은 create-react-app으로 APP을 만들면 기본적으로 사용할 수 있다\r\n// 그리고 커밋되지 않도록 .gitignore에 꼭 .env를 작성한다\r\n// .env는 절대 커밋하지 않고 환경변수 처럼 사용한다\r\n// 나중에 배포할 때 변수(REACT_APP_YOUTUBE_API_KEY)를 서버상에서 환경변수로 설정해준다\r\n// params는 api의 주소처럼 작성해주면 된다\r\n\r\n// export default class Youtube {\r\n//   constructor() {\r\n//     this.httpClient = axios.create({\r\n//       baseURL: \"https://www.googleapis.com/youtube/v3\",\r\n//       params: { key: process.env.REACT_APP_YOUTUBE_API_KEY },\r\n//     });\r\n//   }\r\n\r\n//   async search(keyword) {\r\n//     return keyword ? this.#searchByKeyword() : this.#mostPopular();\r\n//   }\r\n\r\n//   async #searchByKeyword(keyword) {\r\n//     return this.httpClient\r\n//       .get(\"search\", {\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           type: \"video\",\r\n//           q: keyword,\r\n//         },\r\n//       })\r\n//       .then((res) => res.data.items)\r\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId })));\r\n//   }\r\n//   async #mostPopular() {\r\n//     return this.httpClient\r\n//       .get(\"videos\", {\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           chart: \"mostPopular\",\r\n//         },\r\n//       })\r\n//       .then((res) => res.data.items);\r\n//   }\r\n// }\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\n// export default class Youtube {\r\n//   constructor(apiClient) {\r\n//     this.apiClient = apiClient;\r\n//   }\r\n\r\n//   async search(keyword) {\r\n//     return keyword ? this.#searchByKeyword(keyword) : this.#mostPopular();\r\n//   }\r\n\r\n//   async #searchByKeyword(keyword) {\r\n//     return this.apiClient\r\n//       .search({\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           type: \"video\",\r\n//           q: keyword,\r\n//         },\r\n//       })\r\n//       .then((res) => res.data.items)\r\n//       .then((items) => items.map((item) => ({ ...item, id: item.id.videoId })));\r\n//   }\r\n\r\n//   async #mostPopular() {\r\n//     return this.apiClient\r\n//       .videos({\r\n//         params: {\r\n//           part: \"snippet\",\r\n//           maxResults: 25,\r\n//           chart: \"mostPopular\",\r\n//         },\r\n//       })\r\n//       .then((res) => res.data.items);\r\n//   }\r\n// }\r\n\r\n// 어떤 apiClient를 받아온다\r\n// search라는 공개 함수가 있다\r\n//  - Youtube Class를 이용해서 만든 인스턴스에서 호출이 가능한 함수\r\n// keyword가 있다면 keyword를 받아서 searchByKeyword를, 없으면 mostPopular의 결과값을 바로 return\r\n// #searchBykeyword\r\n// 어떤 Client에 대해 search함수를 사용할 때 필요한 params를 전달\r\n// search는 비동기 함수니까 promise를 return하는 함수니까 then으로 받아온 데이터를 적절히 처리\r\n// #mostPopular\r\n// 어떤 Client에 대해 videos함수를 사용할 때 필요한 params를 전달\r\n// Youtube class\r\n// 외부로부터 전달 받은 apiClient를 이용해서 원하는 옵션을 전달해서 apiClient를 호출\r\n// apiClient에는 두가지 함수가 있다(search, videos)\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\nexport default class Youtube {\r\n  constructor(apiClient) {\r\n    this.apiClient = apiClient;\r\n  }\r\n\r\n  async search(keyword) {\r\n    return keyword ? this.#searchByKeyword(keyword) : this.#mostPopular();\r\n  }\r\n\r\n  async #searchByKeyword(keyword) {\r\n    return this.apiClient\r\n      .search({\r\n        params: {\r\n          part: \"snippet\",\r\n          maxResults: 25,\r\n          type: \"video\",\r\n          q: keyword,\r\n        },\r\n      })\r\n      .then((res) => res.data.items)\r\n      .then((items) => items.map((item) => ({ ...item, id: item.id.videoId })));\r\n  }\r\n\r\n  async #mostPopular() {\r\n    return this.apiClient\r\n      .videos({\r\n        params: {\r\n          part: \"snippet\",\r\n          maxResults: 25,\r\n          chart: \"mostPopular\",\r\n        },\r\n      })\r\n      .then((res) => res?.data?.items);\r\n  }\r\n}\r\n"],"mappings":";;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,MAAMA,OAAO,CAAC;EAC3BC,WAAWA,CAACC,SAAS,EAAE;IAAAC,MAAA,CAAAC,cAAA,OAAAC,YAAA;MAAAC,KAAA,EAAAC;IAAA;IAAAJ,MAAA,CAAAC,cAAA,OAAAI,gBAAA;MAAAF,KAAA,EAAAG;IAAA;IACrB,IAAI,CAACP,SAAS,GAAGA,SAAS;EAC5B;EAEA,MAAMQ,MAAMA,CAACC,OAAO,EAAE;IACpB,OAAOA,OAAO,GAAAC,2BAAA,CAAG,IAAI,EAAAJ,gBAAA,EAAAA,gBAAA,EAAkBG,OAAO,IAAAC,2BAAA,CAAI,IAAI,EAAAP,YAAA,EAAAA,YAAA,GAAe;EACvE;AA2BF;AAAC,eAAAI,kBAzBwBE,OAAO,EAAE;EAC9B,OAAO,IAAI,CAACT,SAAS,CAClBQ,MAAM,CAAC;IACNG,MAAM,EAAE;MACNC,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,OAAO;MACbC,CAAC,EAAEN;IACL;EACF,CAAC,CAAC,CACDO,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAACC,KAAK,CAAC,CAC7BH,IAAI,CAAEG,KAAK,IAAKA,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;IAAE,GAAGA,IAAI;IAAEC,EAAE,EAAED,IAAI,CAACC,EAAE,CAACC;EAAQ,CAAC,CAAC,CAAC,CAAC;AAC7E;AAAC,eAAAlB,cAAA,EAEoB;EACnB,OAAO,IAAI,CAACL,SAAS,CAClBwB,MAAM,CAAC;IACNb,MAAM,EAAE;MACNC,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE,EAAE;MACdY,KAAK,EAAE;IACT;EACF,CAAC,CAAC,CACDT,IAAI,CAAEC,GAAG;IAAA,IAAAS,SAAA;IAAA,OAAKT,GAAG,aAAHA,GAAG,wBAAAS,SAAA,GAAHT,GAAG,CAAEC,IAAI,cAAAQ,SAAA,uBAATA,SAAA,CAAWP,KAAK;EAAA,EAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}